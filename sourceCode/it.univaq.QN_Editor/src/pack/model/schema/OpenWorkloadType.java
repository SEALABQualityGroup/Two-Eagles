/**
 * OpenWorkloadType.java
 *
 * This file was generated by XMLSPY 5 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package pack.model.schema;

import pack.model.altova.xml.types.SchemaID;
import pack.model.altova.xml.types.SchemaIDRef;

/**
 * OpenWorkType è il tipi di un OpenWorkload.
 * Un OpenWorkload (Carico di lavoro "Aperto") è un Workload
 * con una popolazione potenzialmente infinita, dove le
 * transazioni (transactions) o i job arrivano dal
 * mondo esterno alla rete (attraverso un SourceNode),
 * ricevono un servizio dai nodi della rete, e infine escono
 * (attraverso un SinkNode). La popolazione di un
 * OpenWorkload è, in ogni istante, variabile.
 * <pre>
 * <code>
 * &lt;xsd:element name="OpenWorkload" minOccurs="0" maxOccurs="unbounded"&gt;
 * 	&lt;xsd:complexType&gt;
 * 		&lt;xsd:sequence&gt;
 * 			&lt;xsd:element name="Transit" type="TransitType" maxOccurs="unbounded"/&gt;
 * 		&lt;/xsd:sequence&gt;
 * 		&lt;xsd:attribute name="WorkloadName" type="xsd:ID" use="required"/&gt;
 * 		&lt;xsd:attribute name="ArrivalRate" type="nonNegativeFloat" use="required"/&gt;
 * 		&lt;xsd:attribute name="TimeUnits" type="TimeUnitsType" use="optional"/&gt;
 * 		&lt;xsd:attribute name="ArrivesAt" type="xsd:IDREF" use="required"/&gt;
 * 		&lt;xsd:attribute name="DepartsAt" type="xsd:IDREF" use="required"/&gt;
 * 	&lt;/xsd:complexType&gt;
 * &lt;/xsd:element&gt;
 * </code>
 * </pre>
 *
 * @author Mirko Email: <a href="mailto:mirkoflamminj@virgilio.it">mirkoflamminj@virgilio.it</a>
 * @version 1.0
 */
public class OpenWorkloadType 
	extends pack.model.altova.xml.Node 
	{
	/**
	 *
	 */
	private static final long serialVersionUID = 1L;
		
	public OpenWorkloadType() {
		super();
	}

	public OpenWorkloadType(org.w3c.dom.Node node) {
		super(node);
	}

	public void addTimeUnits(TimeUnitsType value) {
		setDomChild(Attribute, null, "TimeUnits", value.toString());
	}

	public void addTimeUnits(String value) throws Exception {
		addTimeUnits(new TimeUnitsType(value));
	}
	
	public boolean hasWorkloadName() {
		return hasDomChild(Attribute, null, "WorkloadName");
	}

	public SchemaID getWorkloadNameAt(int index) throws Exception {
		return new SchemaID(getDomNodeValue(getDomChildAt(Attribute, null, "WorkloadName", index)));
	}

	private void addWorkloadName(SchemaID value) {
		setDomChild(Attribute, null, "WorkloadName", value.toString());
	}

	public void addWorkloadName(String value) throws Exception {
		addWorkloadName(new SchemaID(value));
	}

	public boolean hasArrivalRate() {
		return hasDomChild(Attribute, null, "ArrivalRate");
	}

	private nonNegativeFloat getArrivalRateAt(int index) throws Exception {
		return new nonNegativeFloat(getDomNodeValue(getDomChildAt(Attribute, null, "ArrivalRate", index)));
	}

	public nonNegativeFloat getArrivalRate() throws Exception {
		return getArrivalRateAt(0);
	}

	public void addArrivalRate(nonNegativeFloat value) {
		setDomChild(Attribute, null, "ArrivalRate", value.toString());
	}

	public boolean hasTimeUnits() {
		return hasDomChild(Attribute, null, "TimeUnits");
	}

	private TimeUnitsType getTimeUnitsAt(int index) throws Exception {
		return new TimeUnitsType(getDomNodeValue(getDomChildAt(Attribute, null, "TimeUnits", index)));
	}

	public TimeUnitsType getTimeUnits() throws Exception {
		return getTimeUnitsAt(0);
	}

	public boolean hasArrivesAt() {
		return hasDomChild(Attribute, null, "ArrivesAt");
	}

	private SchemaIDRef getArrivesAtAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(getDomChildAt(Attribute, null, "ArrivesAt", index)));
	}

	public SchemaIDRef getArrivesAt() throws Exception {
		return getArrivesAtAt(0);
	}

	private void addArrivesAt(SchemaIDRef value) {
		setDomChild(Attribute, null, "ArrivesAt", value.toString());
	}

	public void addArrivesAt(String value) throws Exception {
		addArrivesAt(new SchemaIDRef(value));
	}

	public boolean hasDepartsAt() {
		return hasDomChild(Attribute, null, "DepartsAt");
	}

	private SchemaIDRef getDepartsAtAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(getDomChildAt(Attribute, null, "DepartsAt", index)));
	}

	public SchemaIDRef getDepartsAt() throws Exception {
		return getDepartsAtAt(0);
	}

	private void addDepartsAt(SchemaIDRef value) {
		setDomChild(Attribute, null, "DepartsAt", value.toString());
	}

	public void addDepartsAt(String value) throws Exception {
		addDepartsAt(new SchemaIDRef(value));
	}

	public int getTransitCount() {
		return getDomChildCount(Element, null, "Transit");
	}

	public boolean hasTransit() {
		return hasDomChild(Element, null, "Transit");
	}

	public TransitType getTransitAt(int index) throws Exception {
		return new TransitType(getDomChildAt(Element, null, "Transit", index));
	}

	public void addTransit(TransitType value) {
		appendDomElement(null, "Transit", value);
	}

	/**
	 * Rimuove l'elemento Transit numero index tra tutti
	 * gli elementi Transit presenti.
	 * @param index
	 */
	public void removeTransitAt(int index) 
		{
		removeDomChildAt(Element, null, "Transit", index);
		}
	
	@Override
	public boolean equals(Object obj)
		{
		if (!(obj instanceof OpenWorkloadType))
			return false;
		OpenWorkloadType openWorkloadType = (OpenWorkloadType)obj;
		if (!this.hasTransit() && openWorkloadType.hasTransit())
			return false;
		if (this.hasTransit() && !openWorkloadType.hasTransit())
			return false;
		if (this.hasTransit() && openWorkloadType.hasTransit())
			{
			if (this.getTransitCount() != openWorkloadType.getTransitCount())
				return false;
			for (int i =0; i < this.getTransitCount(); i++)
				{
				try {
					if (!this.getTransitAt(i).equals(openWorkloadType.getTransitAt(i)))
						return false;
					}
				catch (Exception e)
					{
					return false;
					}
				}
			}
		if (!this.hasWorkloadName() && openWorkloadType.hasWorkloadName())
			return false;
		if (this.hasWorkloadName() && !openWorkloadType.hasWorkloadName())
			return false;
		if (this.hasWorkloadName() && openWorkloadType.hasWorkloadName())
			{
			try {
				if (!this.getWorkloadNameAt(0).equals(openWorkloadType.getWorkloadNameAt(0)))
					return false;
				}
			catch (Exception e)
				{
				return false;
				}
			}
		if (!this.hasArrivalRate() && openWorkloadType.hasArrivalRate())
			return false;
		if (this.hasArrivalRate() && !openWorkloadType.hasArrivalRate())
			return false;
		if (this.hasArrivalRate() && openWorkloadType.hasArrivalRate())
			{
			try {
				if (!this.getArrivalRate().asString().equals(openWorkloadType.getArrivalRate().asString()))
					return false;
				}
			catch (Exception e)
				{
				return false;
				}
			}
		if (!this.hasTimeUnits() && openWorkloadType.hasTimeUnits())
			return false;
		if (this.hasTimeUnits() && !openWorkloadType.hasTimeUnits())
			return false;
		if (this.hasTimeUnits() && openWorkloadType.hasTimeUnits())
			{
			try {
				if (!this.getTimeUnits().asString().equals(openWorkloadType.getTimeUnits().asString()))
					return false;
				}
			catch (Exception e)
				{
				return false;
				}
			}
		if (!this.hasArrivesAt() && openWorkloadType.hasArrivesAt())
			return false;
		if (this.hasArrivesAt() && !openWorkloadType.hasArrivesAt())
			return false;
		if (this.hasArrivesAt() && openWorkloadType.hasArrivesAt())
			{
			try {
				if (!this.getArrivesAt().asString().equals(openWorkloadType.getArrivesAt().asString()))
					return false;
				}
			catch (Exception e)
				{
				return false;
				}
			}
		if (!this.hasDepartsAt() && openWorkloadType.hasDepartsAt())
			return false;
		if (this.hasDepartsAt() && !openWorkloadType.hasDepartsAt())
			return false;
		if (this.hasDepartsAt() && openWorkloadType.hasDepartsAt())
			{
			try {
				if (!this.getDepartsAt().asString().equals(openWorkloadType.getDepartsAt().asString()))
					return false;
				}
			catch (Exception e)
				{
				return false;
				}
			}
		return true;
		}
	
	/**
	 * Inserisce un elemento Transit alla posizione numero
	 * index tra tutti gli elementi Transit presenti.
	 * @param value
	 * @param index
	 */
	public void insertTransitAt(TransitType value, int index) 
		{
		insertDomElementAt(null, "Transit", index, value);
		}
	
	public void addArrivalRate(String value) throws Exception 
		{
		addArrivalRate(new nonNegativeFloat(value));
		}
	}
