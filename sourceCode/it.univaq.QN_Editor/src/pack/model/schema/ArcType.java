/**
 * ArcType.java
 *
 * This file was generated by XMLSPY 5 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package pack.model.schema;

import pack.model.altova.xml.types.SchemaIDRef;
import pack.model.altova.xml.types.SchemaString;

/**
 *
 * Un ArcType è il tipo di un Arc (Arco).
 * Un Arc connette due Nodes di un
 * QueueingNetworkModel. L'attraversamento di
 * un arco rappresenta il completamento di una richiesta di
 * servizio fatta al nodo FromNode (Nodo Origine) ed il
 * nascere di una nuova richiesta di servizio fatta al nodo
 * ToNode (Nodo	Destinazione).
 * <pre>
 * <code>
 * &lt;xsd:complexType name="ArcType"&gt;
 *	&lt;xsd:attribute name="Description" type="xsd:string"/&gt;
 *	&lt;xsd:attribute name="FromNode" type="xsd:IDREF" use="required"/&gt;
 *	&lt;xsd:attribute name="ToNode" type="xsd:IDREF" use="required"/&gt;
 * &lt;/xsd:complexType&gt;
 * </code>
 * </pre>
 *
 * @author Mirko Email: <a href="mailto:mirkoflamminj@virgilio.it">mirkoflamminj@virgilio.it</a>
 * @version 1.0
 */
public class ArcType 
	extends pack.model.altova.xml.Node 
	{

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public ArcType() {
		super();
	}

	public ArcType(org.w3c.dom.Node node) {
		super(node);
	}

	/**
	 * Restituisce true se e solo se l'elemento Arc ha una
	 * descrizione.
	 * @return
	 */
	public boolean hasDescription() {
		return hasDomChild(Attribute, null, "Description");
	}

	/**
	 * Restituisce l'attributo numero index. Solleva
	 * un'eccezione se tale attributo non è Description.
	 * @param index
	 * @return
	 * @throws Exception
	 */
	private SchemaString getDescriptionAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "Description", index)));
	}

	/**
	 * Restituisce la descrizione presente nell'
	 * elemento Arc.
	 * @return
	 * @throws Exception
	 */
	public SchemaString getDescription() throws Exception {
		return getDescriptionAt(0);
	}

	/**
	 * Restituisce true se e solo se l'elemento
	 * Arc ha almento un attributo FromNode.
	 * @return
	 */
	public boolean hasFromNode() {
		return hasDomChild(Attribute, null, "FromNode");
	}

	/**
	 * Restituisce l'attributo FromNode. Index non viene
	 * considerato.
	 * @param index
	 * @return
	 * @throws Exception
	 */
	private SchemaIDRef getFromNodeAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(getDomChildAt(Attribute, null, "FromNode", index)));
	}

	/**
	 * Restituisce l'attributo FromNode.
	 * @return
	 * @throws Exception
	 */
	public SchemaIDRef getFromNode() throws Exception {
		return getFromNodeAt(0);
	}

	/**
	 * Aggiunge un attributo FromNode.
	 * @param value
	 */
	private void addFromNode(SchemaIDRef value) {
		setDomChild(Attribute, null, "FromNode", value.toString());
	}

	/**
	 * Aggiunge un attributo FromNode.
	 * @param value
	 */
	public void addFromNode(String value) throws Exception {
		addFromNode(new SchemaIDRef(value));
	}

	/**
	 * Restituisce true se e solo se l'elemento Arc
	 * ha un attributo ToNode.
	 * @return
	 */
	public boolean hasToNode() {
		return hasDomChild(Attribute, null, "ToNode");
	}

	/**
	 * Restituisce l'attributo ToNode. index è superfluo.
	 * @param index
	 * @return
	 * @throws Exception
	 */
	private SchemaIDRef getToNodeAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(getDomChildAt(Attribute, null, "ToNode", index)));
	}

	/**
	 * Restituisce l'attributo ToNode.
	 * @return
	 * @throws Exception
	 */
	public SchemaIDRef getToNode() throws Exception {
		return getToNodeAt(0);
	}

	/**
	 * Aggiunge l'attributo ToNode.
	 * @param value
	 */
	private void addToNode(SchemaIDRef value) {
		setDomChild(Attribute, null, "ToNode", value.toString());
	}

	/**
	 * Aggiunge l'attributo ToNode.
	 * @param value
	 * @throws Exception
	 */
	public void addToNode(String value) throws Exception {
		addToNode(new SchemaIDRef(value));
	}
	
	@Override
	public boolean equals(Object obj)
		{
		if (!(obj instanceof ArcType))
			return false;
		ArcType arcType = (ArcType)obj;
		if (this.hasDescription() && !arcType.hasDescription())
			return false;
		if (!this.hasDescription() && arcType.hasDescription())
			return false;
		if (this.hasDescription() && arcType.hasDescription())
			{
			try {
				if (!this.getDescription().asString().equals(arcType.getDescription().asString()))
					return false;
				}
			catch (Exception e)
				{
				return false;
				}
			}
		if (this.hasFromNode() && !arcType.hasFromNode())
			return false;
		if (!this.hasFromNode() && arcType.hasFromNode())
			return false;
		if (this.hasFromNode() && arcType.hasFromNode())
			{
			try {
				if (!this.getFromNode().asString().equals(arcType.getFromNode().asString()))
					return false;
				}
			catch (Exception e)
				{
				return false;
				}
			}
		if (this.hasToNode() && !arcType.hasToNode())
			return false;
		if (!this.hasToNode() && arcType.hasToNode())
			return false;
		if (this.hasToNode() && arcType.hasToNode())
			{
			try {
				if (!this.getToNode().asString().equals(arcType.getToNode().asString()))
					return false;
				}
			catch (Exception e)
				{
				return false;
				}
			}
		return true;
		}
	
	/**
	 * Aggiunge una descrizione.
	 * @param value
	 */
	public void addDescription(SchemaString value) 
		{
		setDomChild(Attribute, null, "Description", value.toString());
		}
	
	/**
	 * Aggiunge una descrizione.
	 * @param value
	 * @throws Exception
	 */
	public void addDescription(String value) throws Exception 
		{
		addDescription(new SchemaString(value));
		}
	}
