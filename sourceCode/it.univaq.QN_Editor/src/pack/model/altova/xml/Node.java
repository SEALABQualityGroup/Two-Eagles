/**
 * Node.java
 *
 * This file was generated by XMLSPY 5 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package pack.model.altova.xml;


public abstract class Node implements java.io.Serializable {
	private static final long serialVersionUID = 1L;
	final protected static short Attribute = 0;
	final protected static short Element   = 1;

	protected static String getDomNodeValue(org.w3c.dom.Node node) {
		if (node == null)
			return null;
		String value = node.getNodeValue();
		if (value != null)
			return value;
		org.w3c.dom.Node child = node.getFirstChild();
		if (child != null && child.getNodeType() == org.w3c.dom.Node.TEXT_NODE)
			return child.getNodeValue();
		else
			return null;
	}

	protected org.w3c.dom.Node domNode = null;

	public Node() {
		domNode = Document.createTemporaryDomNode();
	}

	public Node(Node node) {
		domNode = node.domNode;
	}

	public Node(org.w3c.dom.Node domNode) {
		this.domNode = domNode;
	}

	public Node(org.w3c.dom.Document domDocument) {
		this.domNode = domDocument.getDocumentElement();
	}

	private org.w3c.dom.Node appendDomChild(int type, String namespaceURI, String name, String value) {
		switch (type) {
		case Attribute:
			org.w3c.dom.Attr attribute = domNode.getOwnerDocument().createAttributeNS(namespaceURI, name);
			attribute.setNodeValue(value);
			domNode.getAttributes().setNamedItemNS(attribute);
			return attribute;

		case Element:
			org.w3c.dom.Element element = domNode.getOwnerDocument().createElementNS(namespaceURI, name);
			if (value != null && !value.equals(""))
				element.appendChild(domNode.getOwnerDocument().createTextNode(value));
			domNode.appendChild(element);
			return element;

		default:
			throw new XmlException("Unknown type");
		}
	}

	private boolean domNodeNameEquals(org.w3c.dom.Node node, String namespaceURI, String name) {
		if (node == null)
			return false;
		String nodeURI = node.getNamespaceURI() == null ? "" : node.getNamespaceURI();
		String nodeName = node.getNodeName() == null ? "" : node.getNodeName();
		if (namespaceURI == null)
			namespaceURI = "";
		if (name == null)
			name = "";
		return nodeURI.equals(namespaceURI) && nodeName.equals(name);
	}

	protected int getDomChildCount(int type, String namespaceURI, String name) {
		switch (type) {
		case Attribute:
			return ((org.w3c.dom.Element)domNode).hasAttributeNS(namespaceURI, name) ? 1 : 0;

		case Element:
			org.w3c.dom.NodeList elements = domNode.getChildNodes();
			int length = elements.getLength();
			int count = 0;

			for (int i = 0; i < length; i++) {
				org.w3c.dom.Node child = elements.item(i);
				if (domNodeNameEquals(child, namespaceURI, name))
					count++;
			}
			return count;

		default:
			throw new XmlException("Unknown type");
		}
	}

	protected boolean hasDomChild(int type, String namespaceURI, String name) {
		switch (type) {
		case Attribute:
			return ((org.w3c.dom.Element)domNode).hasAttributeNS(namespaceURI, name) ? true : false;

		case Element:
			org.w3c.dom.NodeList elements = domNode.getChildNodes();
			int length = elements.getLength();
			for (int i = 0; i < length; i++)
				if (domNodeNameEquals(elements.item(i), namespaceURI, name))
					return true;
			return false;

		default:
			throw new XmlException("Unknown type");
		}
	}

	protected org.w3c.dom.Node getDomChildAt(int type, String namespaceURI, String name, int index) {
		int length, count = 0;

		switch (type) {
		case Attribute:
			return domNode.getAttributes().getNamedItemNS(namespaceURI, name);

		case Element:
			org.w3c.dom.NodeList elements = domNode.getChildNodes();
			length = elements.getLength();
			for (int i = 0; i < length; i++) {
				org.w3c.dom.Node child = elements.item(i);
				if (domNodeNameEquals(child, namespaceURI, name) && count++ == index)
					return child;
			}
			throw new XmlException("Index out of range");

		default:
			throw new XmlException("Unknown type");
		}
	}

	protected org.w3c.dom.Node insertDomChildAt(int type, String namespaceURI, String name, int index, String value) {
		if (type == Attribute) {
			return appendDomChild(type, namespaceURI, name, value);
		} else {
			org.w3c.dom.Element element = domNode.getOwnerDocument().createElementNS(namespaceURI, name);
			element.appendChild(domNode.getOwnerDocument().createTextNode(value));
			return domNode.insertBefore(element, getDomChildAt(Element, namespaceURI, name, index));
		}
	}

	protected org.w3c.dom.Node insertDomElementAt(String namespaceURI, String name, int index, pack.model.altova.xml.Node srcNode) {
		srcNode.domNode = domNode.insertBefore(
				cloneDomElementAs(namespaceURI, name, srcNode),
				getDomChildAt(Element, namespaceURI, name, index)
				);
		return srcNode.domNode;
	}

	protected org.w3c.dom.Node replaceDomChildAt(int type, String namespaceURI, String name, int index, String value) {
		if (type == Attribute) {
			return appendDomChild(type, namespaceURI, name, value);
		} else {
			org.w3c.dom.Element element = domNode.getOwnerDocument().createElementNS(namespaceURI, name);
			element.appendChild(domNode.getOwnerDocument().createTextNode(value));
			return domNode.replaceChild(element, getDomChildAt(Element, namespaceURI, name, index));
		}
	}

	protected org.w3c.dom.Node replaceDomElementAt(String namespaceURI, String name, int index, pack.model.altova.xml.Node srcNode) {
		srcNode.domNode = domNode.replaceChild(
				cloneDomElementAs(namespaceURI, name, srcNode),
				getDomChildAt(Element, namespaceURI, name, index)
				);
		return srcNode.domNode;
	}

	private org.w3c.dom.Node setDomChildAt(int type, String namespaceURI, String name, String value, int index) {
		int length, count = 0;

		switch (type) {
		case Attribute:
			org.w3c.dom.Attr oldAttr = ((org.w3c.dom.Element)domNode).getAttributeNodeNS(namespaceURI, name);
			((org.w3c.dom.Element)domNode).setAttributeNS(namespaceURI, name, value);
			return oldAttr;

		case Element:
			org.w3c.dom.NodeList elements = domNode.getChildNodes();
			length = elements.getLength();
			for (int i = 0; i < length; i++) {
				org.w3c.dom.Node child = elements.item(i);
				if (domNodeNameEquals(child, namespaceURI, name) && count++ == index)
					return child.replaceChild(child.getOwnerDocument().createTextNode(value), child.getFirstChild());
			}
			throw new XmlException("Index out of range");

		default:
			throw new XmlException("Unknown type");
		}
	}

	protected org.w3c.dom.Node setDomChild(int type, String namespaceURI, String name, String value) {
		if (type == Attribute || getDomChildCount(type, namespaceURI, name) > 0) {
			return setDomChildAt(type, namespaceURI, name, value, 0);
		} else {
			appendDomChild(type, namespaceURI, name, value);
			return null;
		}
	}

	protected org.w3c.dom.Node removeDomChildAt(int type, String namespaceURI, String name, int index) {
		int length, count = 0;

		switch (type) {
		case Attribute:
			return domNode.getAttributes().removeNamedItemNS(namespaceURI, name);

		case Element:
			org.w3c.dom.NodeList elements = domNode.getChildNodes();
			length = elements.getLength();
			for (int i = 0; i < length; i++) {
				org.w3c.dom.Node child = elements.item(i);
				if (domNodeNameEquals(child, namespaceURI, name) && count++ == index)
					return domNode.removeChild(child);
			}
			throw new XmlException("Index out of range");

		default:
			throw new XmlException("Unknown type");
		}
	}

	protected org.w3c.dom.Node appendDomElement(String namespaceURI, String name, pack.model.altova.xml.Node srcNode) {
		srcNode.domNode = domNode.appendChild(cloneDomElementAs(namespaceURI, name, srcNode));
		return srcNode.domNode;
	}

	private org.w3c.dom.Element cloneDomElementAs(String namespaceURI, String name, pack.model.altova.xml.Node srcNode) {
		org.w3c.dom.Element newDomNode = domNode.getOwnerDocument().createElementNS(namespaceURI, name);
		org.w3c.dom.Element srcDomNode = (org.w3c.dom.Element)srcNode.domNode;
		org.w3c.dom.Document doc = newDomNode.getOwnerDocument();

		org.w3c.dom.NodeList list = srcDomNode.getChildNodes();
		int length = list.getLength();
		for (int i = 0; i < length; i++)
			newDomNode.appendChild(doc.importNode(list.item(i), true));

		org.w3c.dom.NamedNodeMap srcAttributes = srcDomNode.getAttributes();
		org.w3c.dom.NamedNodeMap newAttributes = newDomNode.getAttributes();
		length = srcAttributes.getLength();
		for (int i = 0; i < length; i++)
			newAttributes.setNamedItemNS((org.w3c.dom.Attr)doc.importNode(srcAttributes.item(i), false));

		return newDomNode;
	}

	protected void cloneInto(org.w3c.dom.Element newDomNode) {
		while (domNode.getFirstChild() != null) {
			org.w3c.dom.Node n = newDomNode.getOwnerDocument().importNode(domNode.getFirstChild(), true);
			newDomNode.appendChild(n);
			domNode.removeChild(domNode.getFirstChild());
		}

		org.w3c.dom.NamedNodeMap srcAttributes = ((org.w3c.dom.Element)domNode).getAttributes();
		org.w3c.dom.NamedNodeMap newAttributes = newDomNode.getAttributes();
		while (srcAttributes.getLength() > 0) {
			org.w3c.dom.Node n = srcAttributes.item(0);
			newAttributes.setNamedItem(newDomNode.getOwnerDocument().importNode(n, true));
			srcAttributes.removeNamedItem(n.getNodeName());
		}

		domNode = newDomNode;
	}
}
