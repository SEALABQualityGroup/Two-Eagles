/**
 * ServerType.java
 *
 * This file was generated by XMLSPY 5 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.schema;

import com.altova.xml.types.SchemaID;
import com.altova.xml.types.SchemaInteger;

/**
 * Un Server rappresenta un nodo dell'execution environment
 * che fornisce un qualche tipo di servizio (processing
 * service) ai Workloads che gli fanno visita. Il tempo di
 * servizio non è specificato in quanto può variare per
 * classi di transazioni o jobs (Workloads).
 * <pre>
 * <code>
 * &lt;xsd:element name="Server" minOccurs="0" maxOccurs="unbounded"&gt;
 * 	&lt;xsd:complexType&gt;
 * 		&lt;xsd:attribute name="Name" type="xsd:ID" use="required"/&gt;
 * 		&lt;xsd:attribute name="Quantity" type="xsd:nonNegativeInteger" use="required"/&gt;
 * 		&lt;xsd:attribute name="SchedulingPolicy" type="SchedulingType" use="required"/&gt;
 * 	&lt;/xsd:complexType&gt;
 * &lt;/xsd:element&gt;
 * </code>
 * </pre>
 *
 * @author Mirko Email: <a href="mailto:mirkoflamminj@virgilio.it">mirkoflamminj@virgilio.it</a>
 * @version 1.0
 */
public class ServerType extends com.altova.xml.Node {

	private static final long serialVersionUID = 1L;

	public ServerType() {
		super();
	}

	public ServerType(ServerType node) {
		super(node);
	}

	public ServerType(org.w3c.dom.Node node) {
		super(node);
	}

	public ServerType(org.w3c.dom.Document doc) {
		super(doc);
	}

	public int getNameMinCount() {
		return 1;
	}

	public int getNameMaxCount() {
		return 1;
	}

	public int getNameCount() {
		return getDomChildCount(Attribute, null, "Name");
	}

	public boolean hasName() {
		return hasDomChild(Attribute, null, "Name");
	}

	public SchemaID getNameAt(int index) throws Exception {
		return new SchemaID(getDomNodeValue(getDomChildAt(Attribute, null, "Name", index)));
	}

	public SchemaID getName() throws Exception {
		return getNameAt(0);
	}

	public void removeNameAt(int index) {
		removeDomChildAt(Attribute, null, "Name", index);
	}

	public void removeName() {
		while (hasName())
			removeNameAt(0);
	}

	public void addName(SchemaID value) {
		setDomChild(Attribute, null, "Name", value.toString());
	}

	public void addName(String value) throws Exception {
		addName(new SchemaID(value));
	}

	public void insertNameAt(SchemaID value, int index) {
		insertDomChildAt(Attribute, null, "Name", index, value.toString());
	}

	public void insertNameAt(String value, int index) throws Exception {
		insertNameAt(new SchemaID(value), index);
	}

	public void replaceNameAt(SchemaID value, int index) {
		replaceDomChildAt(Attribute, null, "Name", index, value.toString());
	}

	public void replaceNameAt(String value, int index) throws Exception {
		replaceNameAt(new SchemaID(value), index);
	}

	public int getQuantityMinCount() {
		return 1;
	}

	public int getQuantityMaxCount() {
		return 1;
	}

	public int getQuantityCount() {
		return getDomChildCount(Attribute, null, "Quantity");
	}

	public boolean hasQuantity() {
		return hasDomChild(Attribute, null, "Quantity");
	}

	public SchemaInteger getQuantityAt(int index) throws Exception {
		return new SchemaInteger(getDomNodeValue(getDomChildAt(Attribute, null, "Quantity", index)));
	}

	public SchemaInteger getQuantity() throws Exception {
		return getQuantityAt(0);
	}

	public void removeQuantityAt(int index) {
		removeDomChildAt(Attribute, null, "Quantity", index);
	}

	public void removeQuantity() {
		while (hasQuantity())
			removeQuantityAt(0);
	}

	public void addQuantity(SchemaInteger value) {
		setDomChild(Attribute, null, "Quantity", value.toString());
	}

	public void addQuantity(String value) throws Exception {
		addQuantity(new SchemaInteger(value));
	}

	public void insertQuantityAt(SchemaInteger value, int index) {
		insertDomChildAt(Attribute, null, "Quantity", index, value.toString());
	}

	public void insertQuantityAt(String value, int index) throws Exception {
		insertQuantityAt(new SchemaInteger(value), index);
	}

	public void replaceQuantityAt(SchemaInteger value, int index) {
		replaceDomChildAt(Attribute, null, "Quantity", index, value.toString());
	}

	public void replaceQuantityAt(String value, int index) throws Exception {
		replaceQuantityAt(new SchemaInteger(value), index);
	}

	public int getSchedulingPolicyMinCount() {
		return 1;
	}

	public int getSchedulingPolicyMaxCount() {
		return 1;
	}

	public int getSchedulingPolicyCount() {
		return getDomChildCount(Attribute, null, "SchedulingPolicy");
	}

	public boolean hasSchedulingPolicy() {
		return hasDomChild(Attribute, null, "SchedulingPolicy");
	}

	public SchedulingType getSchedulingPolicyAt(int index) throws Exception {
		return new SchedulingType(getDomNodeValue(getDomChildAt(Attribute, null, "SchedulingPolicy", index)));
	}

	public SchedulingType getSchedulingPolicy() throws Exception {
		return getSchedulingPolicyAt(0);
	}

	public void removeSchedulingPolicyAt(int index) {
		removeDomChildAt(Attribute, null, "SchedulingPolicy", index);
	}

	public void removeSchedulingPolicy() {
		while (hasSchedulingPolicy())
			removeSchedulingPolicyAt(0);
	}

	public void addSchedulingPolicy(SchedulingType value) {
		setDomChild(Attribute, null, "SchedulingPolicy", value.toString());
	}

	public void addSchedulingPolicy(String value) throws Exception {
		addSchedulingPolicy(new SchedulingType(value));
	}

	public void insertSchedulingPolicyAt(SchedulingType value, int index) {
		insertDomChildAt(Attribute, null, "SchedulingPolicy", index, value.toString());
	}

	public void insertSchedulingPolicyAt(String value, int index) throws Exception {
		insertSchedulingPolicyAt(new SchedulingType(value), index);
	}

	public void replaceSchedulingPolicyAt(SchedulingType value, int index) {
		replaceDomChildAt(Attribute, null, "SchedulingPolicy", index, value.toString());
	}

	public void replaceSchedulingPolicyAt(String value, int index) throws Exception {
		replaceSchedulingPolicyAt(new SchedulingType(value), index);
	}
}
