/**
 * QNMType.java
 *
 * This file was generated by XMLSPY 5 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.schema;

import com.altova.xml.types.SchemaDateTime;
import com.altova.xml.types.SchemaString;

/**
 * Un QueueingNetworkModel (Modello a Reti di Code)
 * rappresenta una rete di Server interconnessi detti nodi
 * della rete (Nodes), i quali forniscono un servizio di
 * elaborazione (processing service) per i Workloads che ne
 * fanno richiesta (ServiceRequest).
 * <pre>
 * <code>
 * &lt;xsd:complexType name="QNMType"&gt;
 * 	&lt;xsd:sequence&gt;
 * 		&lt;xsd:element name="Node" type="NodeType" maxOccurs="unbounded"/&gt;
 * 		&lt;xsd:element name="Arc" type="ArcType" minOccurs="0" maxOccurs="unbounded"/&gt;
 * 		&lt;xsd:element name="Workload" type="WorkloadType" maxOccurs="unbounded"/&gt;
 * 		&lt;xsd:element name="ServiceRequest" type="ServiceRequestType" maxOccurs="unbounded"/&gt;
 * 	&lt;/xsd:sequence&gt;
 * 	&lt;xsd:attribute name="Name" type="xsd:string" use="optional"/&gt;
 * 	&lt;xsd:attribute name="Description" type="xsd:string" use="optional"/&gt;
 * 	&lt;xsd:attribute name="Date-Time" type="xsd:dateTime" use="optional"/&gt;
 * &lt;/xsd:complexType&gt;
 * </code>
 * </pre>
 *
 * @author Mirko Email: <a href="mailto:mirkoflamminj@virgilio.it">mirkoflamminj@virgilio.it</a>
 * @version 1.0
 */
public class QNMType extends com.altova.xml.Node {

	private static final long serialVersionUID = 1L;

	public QNMType() {
		super();
	}

	public QNMType(QNMType node) {
		super(node);
	}

	public QNMType(org.w3c.dom.Node node) {
		super(node);
	}

	public QNMType(org.w3c.dom.Document doc) {
		super(doc);
	}

	public int getNameMinCount() {
		return 0;
	}

	public int getNameMaxCount() {
		return 1;
	}

	public int getNameCount() {
		return getDomChildCount(Attribute, null, "Name");
	}

	public boolean hasName() {
		return hasDomChild(Attribute, null, "Name");
	}

	public SchemaString getNameAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "Name", index)));
	}

	public SchemaString getName() throws Exception {
		return getNameAt(0);
	}

	public void removeNameAt(int index) {
		removeDomChildAt(Attribute, null, "Name", index);
	}

	public void removeName() {
		while (hasName())
			removeNameAt(0);
	}

	public void addName(SchemaString value) {
		setDomChild(Attribute, null, "Name", value.toString());
	}

	public void addName(String value) throws Exception {
		addName(new SchemaString(value));
	}

	public void insertNameAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "Name", index, value.toString());
	}

	public void insertNameAt(String value, int index) throws Exception {
		insertNameAt(new SchemaString(value), index);
	}

	public void replaceNameAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "Name", index, value.toString());
	}

	public void replaceNameAt(String value, int index) throws Exception {
		replaceNameAt(new SchemaString(value), index);
	}

	public int getDescriptionMinCount() {
		return 0;
	}

	public int getDescriptionMaxCount() {
		return 1;
	}

	public int getDescriptionCount() {
		return getDomChildCount(Attribute, null, "Description");
	}

	public boolean hasDescription() {
		return hasDomChild(Attribute, null, "Description");
	}

	public SchemaString getDescriptionAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "Description", index)));
	}

	public SchemaString getDescription() throws Exception {
		return getDescriptionAt(0);
	}

	public void removeDescriptionAt(int index) {
		removeDomChildAt(Attribute, null, "Description", index);
	}

	public void removeDescription() {
		while (hasDescription())
			removeDescriptionAt(0);
	}

	public void addDescription(SchemaString value) {
		setDomChild(Attribute, null, "Description", value.toString());
	}

	public void addDescription(String value) throws Exception {
		addDescription(new SchemaString(value));
	}

	public void insertDescriptionAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "Description", index, value.toString());
	}

	public void insertDescriptionAt(String value, int index) throws Exception {
		insertDescriptionAt(new SchemaString(value), index);
	}

	public void replaceDescriptionAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "Description", index, value.toString());
	}

	public void replaceDescriptionAt(String value, int index) throws Exception {
		replaceDescriptionAt(new SchemaString(value), index);
	}

	public int getDate_TimeMinCount() {
		return 0;
	}

	public int getDate_TimeMaxCount() {
		return 1;
	}

	public int getDate_TimeCount() {
		return getDomChildCount(Attribute, null, "Date-Time");
	}

	public boolean hasDate_Time() {
		return hasDomChild(Attribute, null, "Date-Time");
	}

	public SchemaDateTime getDate_TimeAt(int index) throws Exception {
		return new SchemaDateTime(getDomNodeValue(getDomChildAt(Attribute, null, "Date-Time", index)));
	}

	public SchemaDateTime getDate_Time() throws Exception {
		return getDate_TimeAt(0);
	}

	public void removeDate_TimeAt(int index) {
		removeDomChildAt(Attribute, null, "Date-Time", index);
	}

	public void removeDate_Time() {
		while (hasDate_Time())
			removeDate_TimeAt(0);
	}

	public void addDate_Time(SchemaDateTime value) {
		setDomChild(Attribute, null, "Date-Time", value.toString());
	}

	public void addDate_Time(String value) throws Exception {
		addDate_Time(new SchemaDateTime(value));
	}

	public void insertDate_TimeAt(SchemaDateTime value, int index) {
		insertDomChildAt(Attribute, null, "Date-Time", index, value.toString());
	}

	public void insertDate_TimeAt(String value, int index) throws Exception {
		insertDate_TimeAt(new SchemaDateTime(value), index);
	}

	public void replaceDate_TimeAt(SchemaDateTime value, int index) {
		replaceDomChildAt(Attribute, null, "Date-Time", index, value.toString());
	}

	public void replaceDate_TimeAt(String value, int index) throws Exception {
		replaceDate_TimeAt(new SchemaDateTime(value), index);
	}

	public int getNodeMinCount() {
		return 1;
	}

	public int getNodeMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getNodeCount() {
		return getDomChildCount(Element, null, "Node");
	}

	public boolean hasNode() {
		return hasDomChild(Element, null, "Node");
	}

	public NodeType getNodeAt(int index) throws Exception {
		return new NodeType(getDomChildAt(Element, null, "Node", index));
	}

	public NodeType getNode() throws Exception {
		return getNodeAt(0);
	}

	public void removeNodeAt(int index) {
		removeDomChildAt(Element, null, "Node", index);
	}

	public void removeNode() {
		while (hasNode())
			removeNodeAt(0);
	}

	public void addNode(NodeType value) {
		appendDomElement(null, "Node", value);
	}

	public void insertNodeAt(NodeType value, int index) {
		insertDomElementAt(null, "Node", index, value);
	}

	public void replaceNodeAt(NodeType value, int index) {
		replaceDomElementAt(null, "Node", index, value);
	}

	public int getArcMinCount() {
		return 0;
	}

	public int getArcMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getArcCount() {
		return getDomChildCount(Element, null, "Arc");
	}

	public boolean hasArc() {
		return hasDomChild(Element, null, "Arc");
	}

	public ArcType getArcAt(int index) throws Exception {
		return new ArcType(getDomChildAt(Element, null, "Arc", index));
	}

	public ArcType getArc() throws Exception {
		return getArcAt(0);
	}

	public void removeArcAt(int index) {
		removeDomChildAt(Element, null, "Arc", index);
	}

	public void removeArc() {
		while (hasArc())
			removeArcAt(0);
	}

	public void addArc(ArcType value) {
		appendDomElement(null, "Arc", value);
	}

	public void insertArcAt(ArcType value, int index) {
		insertDomElementAt(null, "Arc", index, value);
	}

	public void replaceArcAt(ArcType value, int index) {
		replaceDomElementAt(null, "Arc", index, value);
	}

	public int getWorkloadMinCount() {
		return 1;
	}

	public int getWorkloadMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getWorkloadCount() {
		return getDomChildCount(Element, null, "Workload");
	}

	public boolean hasWorkload() {
		return hasDomChild(Element, null, "Workload");
	}

	public WorkloadType getWorkloadAt(int index) throws Exception {
		return new WorkloadType(getDomChildAt(Element, null, "Workload", index));
	}

	public WorkloadType getWorkload() throws Exception {
		return getWorkloadAt(0);
	}

	public void removeWorkloadAt(int index) {
		removeDomChildAt(Element, null, "Workload", index);
	}

	public void removeWorkload() {
		while (hasWorkload())
			removeWorkloadAt(0);
	}

	public void addWorkload(WorkloadType value) {
		appendDomElement(null, "Workload", value);
	}

	public void insertWorkloadAt(WorkloadType value, int index) {
		insertDomElementAt(null, "Workload", index, value);
	}

	public void replaceWorkloadAt(WorkloadType value, int index) {
		replaceDomElementAt(null, "Workload", index, value);
	}

	public int getServiceRequestMinCount() {
		return 1;
	}

	public int getServiceRequestMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getServiceRequestCount() {
		return getDomChildCount(Element, null, "ServiceRequest");
	}

	public boolean hasServiceRequest() {
		return hasDomChild(Element, null, "ServiceRequest");
	}

	public ServiceRequestType getServiceRequestAt(int index) throws Exception {
		return new ServiceRequestType(getDomChildAt(Element, null, "ServiceRequest", index));
	}

	public ServiceRequestType getServiceRequest() throws Exception {
		return getServiceRequestAt(0);
	}

	public void removeServiceRequestAt(int index) {
		removeDomChildAt(Element, null, "ServiceRequest", index);
	}

	public void removeServiceRequest() {
		while (hasServiceRequest())
			removeServiceRequestAt(0);
	}

	public void addServiceRequest(ServiceRequestType value) {
		appendDomElement(null, "ServiceRequest", value);
	}

	public void insertServiceRequestAt(ServiceRequestType value, int index) {
		insertDomElementAt(null, "ServiceRequest", index, value);
	}

	public void replaceServiceRequestAt(ServiceRequestType value, int index) {
		replaceDomElementAt(null, "ServiceRequest", index, value);
	}
}
