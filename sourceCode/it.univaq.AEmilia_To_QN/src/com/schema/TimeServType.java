/**
 * TimeServType.java
 *
 * This file was generated by XMLSPY 5 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.schema;

import com.altova.xml.types.SchemaIDRef;
import com.altova.xml.types.SchemaInteger;

/**
 * Una TimeServiceRequest è una richiesta di servizio diretta
 * ad un Server, fatta specificando il tempo medio di
 * servizio ed il numero di visite fornite per ogni
 * Workload che visita il Server specificato.
 * <pre>
 * <code>
 * &lt;xsd:complexType name="TimeServType"&gt;
 * 	&lt;xsd:sequence&gt;
 * 		&lt;xsd:element name="Transit" type="TransitType" maxOccurs="unbounded"/&gt;
 * 	&lt;/xsd:sequence&gt;
 * 	&lt;xsd:attribute name="WorkloadName" type="xsd:IDREF" use="required"/&gt;
 * 	&lt;xsd:attribute name="ServerID" type="xsd:IDREF" use="required"/&gt;
 * 	&lt;xsd:attribute name="TimeUnits" type="TimeUnitsType" use="optional"/&gt;
 * 	&lt;xsd:attribute name="ServiceTime" type="nonNegativeFloat" use="required"/&gt;
 * 	&lt;xsd:attribute name="NumberOfVisits" type="xsd:nonNegativeInteger" use="optional"/&gt;
 * &lt;/xsd:complexType&gt;
 * </code>
 * </pre>
 *
 * @author Mirko Email: <a href="mailto:mirkoflamminj@virgilio.it">mirkoflamminj@virgilio.it</a>
 * @version 1.0
 */
public class TimeServType extends com.altova.xml.Node {

	private static final long serialVersionUID = 1L;

	public TimeServType() {
		super();
	}

	public TimeServType(TimeServType node) {
		super(node);
	}

	public TimeServType(org.w3c.dom.Node node) {
		super(node);
	}

	public TimeServType(org.w3c.dom.Document doc) {
		super(doc);
	}

	public int getWorkloadNameMinCount() {
		return 1;
	}

	public int getWorkloadNameMaxCount() {
		return 1;
	}

	public int getWorkloadNameCount() {
		return getDomChildCount(Attribute, null, "WorkloadName");
	}

	public boolean hasWorkloadName() {
		return hasDomChild(Attribute, null, "WorkloadName");
	}

	public SchemaIDRef getWorkloadNameAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(getDomChildAt(Attribute, null, "WorkloadName", index)));
	}

	public SchemaIDRef getWorkloadName() throws Exception {
		return getWorkloadNameAt(0);
	}

	public void removeWorkloadNameAt(int index) {
		removeDomChildAt(Attribute, null, "WorkloadName", index);
	}

	public void removeWorkloadName() {
		while (hasWorkloadName())
			removeWorkloadNameAt(0);
	}

	public void addWorkloadName(SchemaIDRef value) {
		setDomChild(Attribute, null, "WorkloadName", value.toString());
	}

	public void addWorkloadName(String value) throws Exception {
		addWorkloadName(new SchemaIDRef(value));
	}

	public void insertWorkloadNameAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "WorkloadName", index, value.toString());
	}

	public void insertWorkloadNameAt(String value, int index) throws Exception {
		insertWorkloadNameAt(new SchemaIDRef(value), index);
	}

	public void replaceWorkloadNameAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "WorkloadName", index, value.toString());
	}

	public void replaceWorkloadNameAt(String value, int index) throws Exception {
		replaceWorkloadNameAt(new SchemaIDRef(value), index);
	}

	public int getServerIDMinCount() {
		return 1;
	}

	public int getServerIDMaxCount() {
		return 1;
	}

	public int getServerIDCount() {
		return getDomChildCount(Attribute, null, "ServerID");
	}

	public boolean hasServerID() {
		return hasDomChild(Attribute, null, "ServerID");
	}

	public SchemaIDRef getServerIDAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(getDomChildAt(Attribute, null, "ServerID", index)));
	}

	public SchemaIDRef getServerID() throws Exception {
		return getServerIDAt(0);
	}

	public void removeServerIDAt(int index) {
		removeDomChildAt(Attribute, null, "ServerID", index);
	}

	public void removeServerID() {
		while (hasServerID())
			removeServerIDAt(0);
	}

	public void addServerID(SchemaIDRef value) {
		setDomChild(Attribute, null, "ServerID", value.toString());
	}

	public void addServerID(String value) throws Exception {
		addServerID(new SchemaIDRef(value));
	}

	public void insertServerIDAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "ServerID", index, value.toString());
	}

	public void insertServerIDAt(String value, int index) throws Exception {
		insertServerIDAt(new SchemaIDRef(value), index);
	}

	public void replaceServerIDAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "ServerID", index, value.toString());
	}

	public void replaceServerIDAt(String value, int index) throws Exception {
		replaceServerIDAt(new SchemaIDRef(value), index);
	}

	public int getTimeUnitsMinCount() {
		return 0;
	}

	public int getTimeUnitsMaxCount() {
		return 1;
	}

	public int getTimeUnitsCount() {
		return getDomChildCount(Attribute, null, "TimeUnits");
	}

	public boolean hasTimeUnits() {
		return hasDomChild(Attribute, null, "TimeUnits");
	}

	public TimeUnitsType getTimeUnitsAt(int index) throws Exception {
		return new TimeUnitsType(getDomNodeValue(getDomChildAt(Attribute, null, "TimeUnits", index)));
	}

	public TimeUnitsType getTimeUnits() throws Exception {
		return getTimeUnitsAt(0);
	}

	public void removeTimeUnitsAt(int index) {
		removeDomChildAt(Attribute, null, "TimeUnits", index);
	}

	public void removeTimeUnits() {
		while (hasTimeUnits())
			removeTimeUnitsAt(0);
	}

	public void addTimeUnits(TimeUnitsType value) {
		setDomChild(Attribute, null, "TimeUnits", value.toString());
	}

	public void addTimeUnits(String value) throws Exception {
		addTimeUnits(new TimeUnitsType(value));
	}

	public void insertTimeUnitsAt(TimeUnitsType value, int index) {
		insertDomChildAt(Attribute, null, "TimeUnits", index, value.toString());
	}

	public void insertTimeUnitsAt(String value, int index) throws Exception {
		insertTimeUnitsAt(new TimeUnitsType(value), index);
	}

	public void replaceTimeUnitsAt(TimeUnitsType value, int index) {
		replaceDomChildAt(Attribute, null, "TimeUnits", index, value.toString());
	}

	public void replaceTimeUnitsAt(String value, int index) throws Exception {
		replaceTimeUnitsAt(new TimeUnitsType(value), index);
	}

	public int getServiceTimeMinCount() {
		return 1;
	}

	public int getServiceTimeMaxCount() {
		return 1;
	}

	public int getServiceTimeCount() {
		return getDomChildCount(Attribute, null, "ServiceTime");
	}

	public boolean hasServiceTime() {
		return hasDomChild(Attribute, null, "ServiceTime");
	}

	public nonNegativeFloat getServiceTimeAt(int index) throws Exception {
		return new nonNegativeFloat(getDomNodeValue(getDomChildAt(Attribute, null, "ServiceTime", index)));
	}

	public nonNegativeFloat getServiceTime() throws Exception {
		return getServiceTimeAt(0);
	}

	public void removeServiceTimeAt(int index) {
		removeDomChildAt(Attribute, null, "ServiceTime", index);
	}

	public void removeServiceTime() {
		while (hasServiceTime())
			removeServiceTimeAt(0);
	}

	public void addServiceTime(nonNegativeFloat value) {
		setDomChild(Attribute, null, "ServiceTime", value.toString());
	}

	public void addServiceTime(String value) throws Exception {
		addServiceTime(new nonNegativeFloat(value));
	}

	public void insertServiceTimeAt(nonNegativeFloat value, int index) {
		insertDomChildAt(Attribute, null, "ServiceTime", index, value.toString());
	}

	public void insertServiceTimeAt(String value, int index) throws Exception {
		insertServiceTimeAt(new nonNegativeFloat(value), index);
	}

	public void replaceServiceTimeAt(nonNegativeFloat value, int index) {
		replaceDomChildAt(Attribute, null, "ServiceTime", index, value.toString());
	}

	public void replaceServiceTimeAt(String value, int index) throws Exception {
		replaceServiceTimeAt(new nonNegativeFloat(value), index);
	}

	public int getNumberOfVisitsMinCount() {
		return 0;
	}

	public int getNumberOfVisitsMaxCount() {
		return 1;
	}

	public int getNumberOfVisitsCount() {
		return getDomChildCount(Attribute, null, "NumberOfVisits");
	}

	public boolean hasNumberOfVisits() {
		return hasDomChild(Attribute, null, "NumberOfVisits");
	}

	public SchemaInteger getNumberOfVisitsAt(int index) throws Exception {
		return new SchemaInteger(getDomNodeValue(getDomChildAt(Attribute, null, "NumberOfVisits", index)));
	}

	public SchemaInteger getNumberOfVisits() throws Exception {
		return getNumberOfVisitsAt(0);
	}

	public void removeNumberOfVisitsAt(int index) {
		removeDomChildAt(Attribute, null, "NumberOfVisits", index);
	}

	public void removeNumberOfVisits() {
		while (hasNumberOfVisits())
			removeNumberOfVisitsAt(0);
	}

	public void addNumberOfVisits(SchemaInteger value) {
		setDomChild(Attribute, null, "NumberOfVisits", value.toString());
	}

	public void addNumberOfVisits(String value) throws Exception {
		addNumberOfVisits(new SchemaInteger(value));
	}

	public void insertNumberOfVisitsAt(SchemaInteger value, int index) {
		insertDomChildAt(Attribute, null, "NumberOfVisits", index, value.toString());
	}

	public void insertNumberOfVisitsAt(String value, int index) throws Exception {
		insertNumberOfVisitsAt(new SchemaInteger(value), index);
	}

	public void replaceNumberOfVisitsAt(SchemaInteger value, int index) {
		replaceDomChildAt(Attribute, null, "NumberOfVisits", index, value.toString());
	}

	public void replaceNumberOfVisitsAt(String value, int index) throws Exception {
		replaceNumberOfVisitsAt(new SchemaInteger(value), index);
	}

	public int getTransitMinCount() {
		return 1;
	}

	public int getTransitMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getTransitCount() {
		return getDomChildCount(Element, null, "Transit");
	}

	public boolean hasTransit() {
		return hasDomChild(Element, null, "Transit");
	}

	public TransitType getTransitAt(int index) throws Exception {
		return new TransitType(getDomChildAt(Element, null, "Transit", index));
	}

	public TransitType getTransit() throws Exception {
		return getTransitAt(0);
	}

	public void removeTransitAt(int index) {
		removeDomChildAt(Element, null, "Transit", index);
	}

	public void removeTransit() {
		while (hasTransit())
			removeTransitAt(0);
	}

	public void addTransit(TransitType value) {
		appendDomElement(null, "Transit", value);
	}

	public void insertTransitAt(TransitType value, int index) {
		insertDomElementAt(null, "Transit", index, value);
	}

	public void replaceTransitAt(TransitType value, int index) {
		replaceDomElementAt(null, "Transit", index, value);
	}
}
